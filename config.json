{
  "title": "kgit",
  "version": "1",
  "prompts_welcome_text": "Welcome to kgit! v1.0.0\n",
  "prompts_description_text": "I know you are probably wondering what this is all about. Well, simply put, this is a game that will teach you the basics of git. It will try to be as simple as it can. Hope it helps!\n",

  "prompts_topics": "The topics we will cover today are (it is highly recommended to follow the topics in order since they build on each other) : \n\n1. Initialize/Reinitialize Git repo\n2. Create a file and commit in the master branch\n3. Create a new branch, make some changes to the file and commit the changes\n4. Checkout back to master branch and merge the changes\n",

  "topic_one_title": "1. Initialize/Reinitialize Git Repo\n",
  "topic_one_summary": "By the end of this topic, you should be able to Initialize/Reinitialize a new Git repository.\n",
  "topic_one_description" : "The `git init` command creates a new Git repository. It can be used to convert an existing, unversioned project to a Git repository or initialize a new, empty repository. Most other Git commands are not available outside of an initialized repository, so this is usually the first command you'll run in a new project.\n\nExecuting `git init` creates a .git subdirectory in the current working directory, which contains all of the necessary Git metadata for the new repository. This metadata includes subdirectories for objects, refs, and template files. A HEAD file is also created which points to the currently checked out commit.\n\nIn short, you want GIT to track all the changes that will happen in the directory. Cool, isn't it ?\n\n",
  "topic_one_test" : "To check if you have understood, the assignment, use the `git init` command to create a new repository in this same directory. When done, proceed and this program will check whether you have passed this test or not. \n",

  "topic_two_title": "2. Create a file and commit in the master branch\n",
  "topic_two_summary": "By the end of this topic, you should be able to commit an individual file to the master branch\n",
  "topic_two_description" : "The `git add` command adds a change in the working directory to the staging area. It tells Git that you want to include updates to a particular file in the next commit. However, git add doesn't really affect the repository in any significant way because changes are not actually recorded until you run `git commit`.\n\nFirst, you edit your files in the working directory. When you’re ready to save a copy of the current state of the project, you stage changes with `git add`. When using the command `git add` you can indicate whether to add all the files that have been changed or one specific file. To add all files, you run the command `git add .` with the fullstop. To add a specific file, i.e kairitu.txt, you run the command `git add kairitu.txt`.\n\nOnce you have added the file, the next step is to commit the changes.\n\nEnter the `git commit`. This command captures a snapshot of the project's currently staged changes. Committed snapshots can be thought of as “safe” versions of a project—Git will never change them unless you explicitly ask it to. Remember, prior to the execution of `git commit`, we had the git add command is used to promote or 'stage' changes to the project that will be stored in a commit. These two commands git commit and git add are two of the most frequently used. They should be your new best friend.\n\nWhen committing, it is paramount to add a message to help track your changes. Hence, when calling the command, we pass a message in the following way : `git commit -m {message}`. Using the same example of kairitu.txt, after using `git add kairitu.txt`, you can commit with a message such as `git commit -m 'Initial commit'`.\n\nIt is also good to note that the add and commit command can be combined such as `git commit -am 'Initial add and commit'`. Did you notice the difference ?\n\n",
  "topic_two_test" : "To check if you have understood, the assignment, create a new file called 'kairitu.txt' in this same directory and add the following text as it is 'I am Kairitu and I love Njamba' without the quotes. After that, use the command `git add .` to add all the files then `git commit -m 'Initial commit'` to commit your changes. When done, proceed and this program will check whether you have passed this test or not.\n",

  "topic_three_title": "3. Create a new branch, make some changes to the file and commit the changes\n",
  "topic_three_summary": "By the end of this topic, you should be able to switch branches, make changes to the file you have created and commit the changes\n",
  "topic_three_description" : "The `git checkout` command lets you navigate between the branches created by git branch. Checking out a branch updates the files in the working directory to match the version stored in that branch, and it tells Git to record all new commits on that branch. Think of it as a way to select which line of development you’re working on.\n\nHaving a dedicated branch for each new feature makes it ridiculously easy to try new experiments without the fear of destroying existing functionality, and it makes it possible to work on many unrelated features at the same time. In addition, branches also facilitate several collaborative workflows.\n\nThe git checkout command accepts a -b argument that acts as a convenience method which will create the new branch and immediately switch to it. You can work on multiple features in a single repository by switching between them with git checkout.",
  "topic_three_test" : "To check if you have understood, the assignment, use the command `git checkout -b develop` to create a new branch and switch to it. Then, create a new file called 'njamba.txt' with the text 'I am Kairitu and I love Njamba and I know he loves me too' without the quotes. After that, use the command `git add .` to add all the files then `git commit -m 'First change in develop commit'` to commit your changes. When done, proceed and this program will check whether you have passed this test or not.\n", 

  "topic_four_title": "4. Checkout back to master branch and merge the changes\n",
  "topic_four_summary": "By the end of this topic, you should be able to switch back to the master branch and merge the develop branch into it\n",
  "topic_four_description" : "Merging is Git's way of putting a forked history back together again. The `git merge` command lets you take the independent lines of development created by git branch and integrate them into a single branch.\n\nGit merge will combine multiple sequences of commits into one unified history. In the most frequent use cases, git merge is used to combine two branches such as the master branch and the develop branch that you have successfully created. In these scenarios, git merge takes two commit pointers, usually the branch tips, and will find a common base commit between them. Once Git finds a common base commit it will create a new 'merge commit' that combines the changes of each queued merge commit sequence.\n\nIn simpler terms, think of it as the unifying of the two branches that the merge is taking place in between. If all goes well, there arises no conflicts. But when they do, they have to be fixed first before completing the merge.",
  "topic_four_test" : "To check if you have understood, the assignment, use the command `git checkout master` to checkout back to the master branch. Then, use the `git merge develop -m 'This is my first merge ever` command to merge the develop branch into the master branch. If all goes well, since the only addition was the 'njamba.txt' file, it should now be added to the master branch. Easy. When done, proceed and this program will check whether you have passed this test or not.\n",

  "check_one_fail": "\nIt seems you did not pass the 1st test. You don't seem to be in the right branch at this point. Please try again",
  "check_two_fail": "\nIt seems you did not pass the 2st test. The file needed does not seem to exist in this branch. Please try again",
  "check_three_fail": "\nIt seems you did not pass the 3st test. The contents of the specified file do not match what was requested. Please try again",
  "check_four_fail": "\nIt seems you did not pass the 4rd test. The commit messages does not have the required messages. Please try again",
  "check_all_pass": "\nCongratulations! You made it! Awesome sauce!"
}
